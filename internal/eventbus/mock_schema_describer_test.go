// Code generated by mockery. DO NOT EDIT.

package eventbus

import (
	context "context"

	eventbusv1 "github.com/conduitio-labs/conduit-connector-salesforce/internal/proto/eventbus/v1"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// mockSchemaDescriber is an autogenerated mock type for the schemaDescriber type
type mockSchemaDescriber struct {
	mock.Mock
}

type mockSchemaDescriber_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSchemaDescriber) EXPECT() *mockSchemaDescriber_Expecter {
	return &mockSchemaDescriber_Expecter{mock: &_m.Mock}
}

// GetSchema provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockSchemaDescriber) GetSchema(_a0 context.Context, _a1 *eventbusv1.SchemaRequest, _a2 ...grpc.CallOption) (*eventbusv1.SchemaInfo, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSchema")
	}

	var r0 *eventbusv1.SchemaInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *eventbusv1.SchemaRequest, ...grpc.CallOption) (*eventbusv1.SchemaInfo, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *eventbusv1.SchemaRequest, ...grpc.CallOption) *eventbusv1.SchemaInfo); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbusv1.SchemaInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *eventbusv1.SchemaRequest, ...grpc.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockSchemaDescriber_GetSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchema'
type mockSchemaDescriber_GetSchema_Call struct {
	*mock.Call
}

// GetSchema is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *eventbusv1.SchemaRequest
//   - _a2 ...grpc.CallOption
func (_e *mockSchemaDescriber_Expecter) GetSchema(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *mockSchemaDescriber_GetSchema_Call {
	return &mockSchemaDescriber_GetSchema_Call{Call: _e.mock.On("GetSchema",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *mockSchemaDescriber_GetSchema_Call) Run(run func(_a0 context.Context, _a1 *eventbusv1.SchemaRequest, _a2 ...grpc.CallOption)) *mockSchemaDescriber_GetSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*eventbusv1.SchemaRequest), variadicArgs...)
	})
	return _c
}

func (_c *mockSchemaDescriber_GetSchema_Call) Return(_a0 *eventbusv1.SchemaInfo, _a1 error) *mockSchemaDescriber_GetSchema_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSchemaDescriber_GetSchema_Call) RunAndReturn(run func(context.Context, *eventbusv1.SchemaRequest, ...grpc.CallOption) (*eventbusv1.SchemaInfo, error)) *mockSchemaDescriber_GetSchema_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSchemaDescriber creates a new instance of mockSchemaDescriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSchemaDescriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSchemaDescriber {
	mock := &mockSchemaDescriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
