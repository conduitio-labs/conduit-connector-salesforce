// Code generated by mockery. DO NOT EDIT.

package eventbus

import (
	context "context"

	eventbusv1 "github.com/conduitio-labs/conduit-connector-salesforce/internal/proto/eventbus/v1"
	mock "github.com/stretchr/testify/mock"

	opencdc "github.com/conduitio/conduit-commons/opencdc"
)

// mockClient is an autogenerated mock type for the Client type
type mockClient struct {
	mock.Mock
}

type mockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockClient) EXPECT() *mockClient_Expecter {
	return &mockClient_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function with given fields: _a0
func (_m *mockClient) Authorize(_a0 context.Context) (context.Context, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockClient_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type mockClient_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockClient_Expecter) Authorize(_a0 interface{}) *mockClient_Authorize_Call {
	return &mockClient_Authorize_Call{Call: _e.mock.On("Authorize", _a0)}
}

func (_c *mockClient_Authorize_Call) Run(run func(_a0 context.Context)) *mockClient_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockClient_Authorize_Call) Return(_a0 context.Context, _a1 error) *mockClient_Authorize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockClient_Authorize_Call) RunAndReturn(run func(context.Context) (context.Context, error)) *mockClient_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// CanPublish provides a mock function with given fields: _a0, _a1
func (_m *mockClient) CanPublish(_a0 context.Context, _a1 ...string) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CanPublish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockClient_CanPublish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanPublish'
type mockClient_CanPublish_Call struct {
	*mock.Call
}

// CanPublish is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ...string
func (_e *mockClient_Expecter) CanPublish(_a0 interface{}, _a1 ...interface{}) *mockClient_CanPublish_Call {
	return &mockClient_CanPublish_Call{Call: _e.mock.On("CanPublish",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *mockClient_CanPublish_Call) Run(run func(_a0 context.Context, _a1 ...string)) *mockClient_CanPublish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *mockClient_CanPublish_Call) Return(_a0 error) *mockClient_CanPublish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClient_CanPublish_Call) RunAndReturn(run func(context.Context, ...string) error) *mockClient_CanPublish_Call {
	_c.Call.Return(run)
	return _c
}

// CanSubscribe provides a mock function with given fields: _a0, _a1
func (_m *mockClient) CanSubscribe(_a0 context.Context, _a1 ...string) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CanSubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockClient_CanSubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanSubscribe'
type mockClient_CanSubscribe_Call struct {
	*mock.Call
}

// CanSubscribe is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ...string
func (_e *mockClient_Expecter) CanSubscribe(_a0 interface{}, _a1 ...interface{}) *mockClient_CanSubscribe_Call {
	return &mockClient_CanSubscribe_Call{Call: _e.mock.On("CanSubscribe",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *mockClient_CanSubscribe_Call) Run(run func(_a0 context.Context, _a1 ...string)) *mockClient_CanSubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *mockClient_CanSubscribe_Call) Return(_a0 error) *mockClient_CanSubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClient_CanSubscribe_Call) RunAndReturn(run func(context.Context, ...string) error) *mockClient_CanSubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Marshal provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockClient) Marshal(_a0 context.Context, _a1 string, _a2 opencdc.StructuredData) ([]byte, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Marshal")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, opencdc.StructuredData) ([]byte, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, opencdc.StructuredData) []byte); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, opencdc.StructuredData) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockClient_Marshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Marshal'
type mockClient_Marshal_Call struct {
	*mock.Call
}

// Marshal is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 opencdc.StructuredData
func (_e *mockClient_Expecter) Marshal(_a0 interface{}, _a1 interface{}, _a2 interface{}) *mockClient_Marshal_Call {
	return &mockClient_Marshal_Call{Call: _e.mock.On("Marshal", _a0, _a1, _a2)}
}

func (_c *mockClient_Marshal_Call) Run(run func(_a0 context.Context, _a1 string, _a2 opencdc.StructuredData)) *mockClient_Marshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(opencdc.StructuredData))
	})
	return _c
}

func (_c *mockClient_Marshal_Call) Return(_a0 []byte, _a1 error) *mockClient_Marshal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockClient_Marshal_Call) RunAndReturn(run func(context.Context, string, opencdc.StructuredData) ([]byte, error)) *mockClient_Marshal_Call {
	_c.Call.Return(run)
	return _c
}

// ParsePreset provides a mock function with given fields: _a0
func (_m *mockClient) ParsePreset(_a0 string) (eventbusv1.ReplayPreset, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ParsePreset")
	}

	var r0 eventbusv1.ReplayPreset
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (eventbusv1.ReplayPreset, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) eventbusv1.ReplayPreset); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(eventbusv1.ReplayPreset)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockClient_ParsePreset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParsePreset'
type mockClient_ParsePreset_Call struct {
	*mock.Call
}

// ParsePreset is a helper method to define mock.On call
//   - _a0 string
func (_e *mockClient_Expecter) ParsePreset(_a0 interface{}) *mockClient_ParsePreset_Call {
	return &mockClient_ParsePreset_Call{Call: _e.mock.On("ParsePreset", _a0)}
}

func (_c *mockClient_ParsePreset_Call) Run(run func(_a0 string)) *mockClient_ParsePreset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockClient_ParsePreset_Call) Return(_a0 eventbusv1.ReplayPreset, _a1 error) *mockClient_ParsePreset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockClient_ParsePreset_Call) RunAndReturn(run func(string) (eventbusv1.ReplayPreset, error)) *mockClient_ParsePreset_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockClient) Publish(_a0 context.Context, _a1 string, _a2 []*eventbusv1.ProducerEvent) (*eventbusv1.PublishResponse, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 *eventbusv1.PublishResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*eventbusv1.ProducerEvent) (*eventbusv1.PublishResponse, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []*eventbusv1.ProducerEvent) *eventbusv1.PublishResponse); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbusv1.PublishResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []*eventbusv1.ProducerEvent) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockClient_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type mockClient_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 []*eventbusv1.ProducerEvent
func (_e *mockClient_Expecter) Publish(_a0 interface{}, _a1 interface{}, _a2 interface{}) *mockClient_Publish_Call {
	return &mockClient_Publish_Call{Call: _e.mock.On("Publish", _a0, _a1, _a2)}
}

func (_c *mockClient_Publish_Call) Run(run func(_a0 context.Context, _a1 string, _a2 []*eventbusv1.ProducerEvent)) *mockClient_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]*eventbusv1.ProducerEvent))
	})
	return _c
}

func (_c *mockClient_Publish_Call) Return(_a0 *eventbusv1.PublishResponse, _a1 error) *mockClient_Publish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockClient_Publish_Call) RunAndReturn(run func(context.Context, string, []*eventbusv1.ProducerEvent) (*eventbusv1.PublishResponse, error)) *mockClient_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: _a0
func (_m *mockClient) Subscribe(_a0 context.Context) (eventbusv1.PubSub_SubscribeClient, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 eventbusv1.PubSub_SubscribeClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (eventbusv1.PubSub_SubscribeClient, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) eventbusv1.PubSub_SubscribeClient); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eventbusv1.PubSub_SubscribeClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockClient_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type mockClient_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockClient_Expecter) Subscribe(_a0 interface{}) *mockClient_Subscribe_Call {
	return &mockClient_Subscribe_Call{Call: _e.mock.On("Subscribe", _a0)}
}

func (_c *mockClient_Subscribe_Call) Run(run func(_a0 context.Context)) *mockClient_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockClient_Subscribe_Call) Return(_a0 eventbusv1.PubSub_SubscribeClient, _a1 error) *mockClient_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockClient_Subscribe_Call) RunAndReturn(run func(context.Context) (eventbusv1.PubSub_SubscribeClient, error)) *mockClient_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Teardown provides a mock function with given fields: _a0
func (_m *mockClient) Teardown(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Teardown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockClient_Teardown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Teardown'
type mockClient_Teardown_Call struct {
	*mock.Call
}

// Teardown is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockClient_Expecter) Teardown(_a0 interface{}) *mockClient_Teardown_Call {
	return &mockClient_Teardown_Call{Call: _e.mock.On("Teardown", _a0)}
}

func (_c *mockClient_Teardown_Call) Run(run func(_a0 context.Context)) *mockClient_Teardown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockClient_Teardown_Call) Return(_a0 error) *mockClient_Teardown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClient_Teardown_Call) RunAndReturn(run func(context.Context) error) *mockClient_Teardown_Call {
	_c.Call.Return(run)
	return _c
}

// TopicSchemaID provides a mock function with given fields: _a0, _a1
func (_m *mockClient) TopicSchemaID(_a0 context.Context, _a1 string) (string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TopicSchemaID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockClient_TopicSchemaID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopicSchemaID'
type mockClient_TopicSchemaID_Call struct {
	*mock.Call
}

// TopicSchemaID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *mockClient_Expecter) TopicSchemaID(_a0 interface{}, _a1 interface{}) *mockClient_TopicSchemaID_Call {
	return &mockClient_TopicSchemaID_Call{Call: _e.mock.On("TopicSchemaID", _a0, _a1)}
}

func (_c *mockClient_TopicSchemaID_Call) Run(run func(_a0 context.Context, _a1 string)) *mockClient_TopicSchemaID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockClient_TopicSchemaID_Call) Return(_a0 string, _a1 error) *mockClient_TopicSchemaID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockClient_TopicSchemaID_Call) RunAndReturn(run func(context.Context, string) (string, error)) *mockClient_TopicSchemaID_Call {
	_c.Call.Return(run)
	return _c
}

// Unmarshal provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockClient) Unmarshal(_a0 context.Context, _a1 string, _a2 []byte) (opencdc.StructuredData, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Unmarshal")
	}

	var r0 opencdc.StructuredData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (opencdc.StructuredData, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) opencdc.StructuredData); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(opencdc.StructuredData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockClient_Unmarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unmarshal'
type mockClient_Unmarshal_Call struct {
	*mock.Call
}

// Unmarshal is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 []byte
func (_e *mockClient_Expecter) Unmarshal(_a0 interface{}, _a1 interface{}, _a2 interface{}) *mockClient_Unmarshal_Call {
	return &mockClient_Unmarshal_Call{Call: _e.mock.On("Unmarshal", _a0, _a1, _a2)}
}

func (_c *mockClient_Unmarshal_Call) Run(run func(_a0 context.Context, _a1 string, _a2 []byte)) *mockClient_Unmarshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *mockClient_Unmarshal_Call) Return(_a0 opencdc.StructuredData, _a1 error) *mockClient_Unmarshal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockClient_Unmarshal_Call) RunAndReturn(run func(context.Context, string, []byte) (opencdc.StructuredData, error)) *mockClient_Unmarshal_Call {
	_c.Call.Return(run)
	return _c
}

// newMockClient creates a new instance of mockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockClient {
	mock := &mockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
