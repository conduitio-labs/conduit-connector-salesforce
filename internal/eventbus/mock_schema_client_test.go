// Code generated by mockery. DO NOT EDIT.

package eventbus

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockSchemaClient is an autogenerated mock type for the schemaClient type
type mockSchemaClient struct {
	mock.Mock
}

type mockSchemaClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSchemaClient) EXPECT() *mockSchemaClient_Expecter {
	return &mockSchemaClient_Expecter{mock: &_m.Mock}
}

// Marshal provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockSchemaClient) Marshal(_a0 context.Context, _a1 string, _a2 map[string]any) ([]byte, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Marshal")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]any) ([]byte, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]any) []byte); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]any) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockSchemaClient_Marshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Marshal'
type mockSchemaClient_Marshal_Call struct {
	*mock.Call
}

// Marshal is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 map[string]any
func (_e *mockSchemaClient_Expecter) Marshal(_a0 interface{}, _a1 interface{}, _a2 interface{}) *mockSchemaClient_Marshal_Call {
	return &mockSchemaClient_Marshal_Call{Call: _e.mock.On("Marshal", _a0, _a1, _a2)}
}

func (_c *mockSchemaClient_Marshal_Call) Run(run func(_a0 context.Context, _a1 string, _a2 map[string]any)) *mockSchemaClient_Marshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]any))
	})
	return _c
}

func (_c *mockSchemaClient_Marshal_Call) Return(_a0 []byte, _a1 error) *mockSchemaClient_Marshal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSchemaClient_Marshal_Call) RunAndReturn(run func(context.Context, string, map[string]any) ([]byte, error)) *mockSchemaClient_Marshal_Call {
	_c.Call.Return(run)
	return _c
}

// Unmarshal provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockSchemaClient) Unmarshal(_a0 context.Context, _a1 string, _a2 []byte) (map[string]any, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Unmarshal")
	}

	var r0 map[string]any
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (map[string]any, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) map[string]any); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockSchemaClient_Unmarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unmarshal'
type mockSchemaClient_Unmarshal_Call struct {
	*mock.Call
}

// Unmarshal is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 []byte
func (_e *mockSchemaClient_Expecter) Unmarshal(_a0 interface{}, _a1 interface{}, _a2 interface{}) *mockSchemaClient_Unmarshal_Call {
	return &mockSchemaClient_Unmarshal_Call{Call: _e.mock.On("Unmarshal", _a0, _a1, _a2)}
}

func (_c *mockSchemaClient_Unmarshal_Call) Run(run func(_a0 context.Context, _a1 string, _a2 []byte)) *mockSchemaClient_Unmarshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *mockSchemaClient_Unmarshal_Call) Return(_a0 map[string]any, _a1 error) *mockSchemaClient_Unmarshal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSchemaClient_Unmarshal_Call) RunAndReturn(run func(context.Context, string, []byte) (map[string]any, error)) *mockSchemaClient_Unmarshal_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSchemaClient creates a new instance of mockSchemaClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSchemaClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSchemaClient {
	mock := &mockSchemaClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
