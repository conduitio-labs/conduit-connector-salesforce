// Code generated by mockery. DO NOT EDIT.

package pubsub

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockAuthorizer is an autogenerated mock type for the authorizer type
type mockAuthorizer struct {
	mock.Mock
}

type mockAuthorizer_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAuthorizer) EXPECT() *mockAuthorizer_Expecter {
	return &mockAuthorizer_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function with given fields: _a0
func (_m *mockAuthorizer) Authorize(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockAuthorizer_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type mockAuthorizer_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockAuthorizer_Expecter) Authorize(_a0 interface{}) *mockAuthorizer_Authorize_Call {
	return &mockAuthorizer_Authorize_Call{Call: _e.mock.On("Authorize", _a0)}
}

func (_c *mockAuthorizer_Authorize_Call) Run(run func(_a0 context.Context)) *mockAuthorizer_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockAuthorizer_Authorize_Call) Return(_a0 error) *mockAuthorizer_Authorize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAuthorizer_Authorize_Call) RunAndReturn(run func(context.Context) error) *mockAuthorizer_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// Context provides a mock function with given fields: _a0
func (_m *mockAuthorizer) Context(_a0 context.Context) context.Context {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// mockAuthorizer_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type mockAuthorizer_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockAuthorizer_Expecter) Context(_a0 interface{}) *mockAuthorizer_Context_Call {
	return &mockAuthorizer_Context_Call{Call: _e.mock.On("Context", _a0)}
}

func (_c *mockAuthorizer_Context_Call) Run(run func(_a0 context.Context)) *mockAuthorizer_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockAuthorizer_Context_Call) Return(_a0 context.Context) *mockAuthorizer_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAuthorizer_Context_Call) RunAndReturn(run func(context.Context) context.Context) *mockAuthorizer_Context_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAuthorizer creates a new instance of mockAuthorizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAuthorizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAuthorizer {
	mock := &mockAuthorizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
