// Code generated by mockery v2.39.1. DO NOT EDIT.

package source

import (
	context "context"

	sdk "github.com/conduitio/conduit-connector-sdk"
	mock "github.com/stretchr/testify/mock"
)

// mockClient is an autogenerated mock type for the client type
type mockClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *mockClient) Close() {
	_m.Called()
}

// HasNext provides a mock function with given fields: _a0
func (_m *mockClient) HasNext(_a0 context.Context) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for HasNext")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Initialize provides a mock function with given fields: ctx, config
func (_m *mockClient) Initialize(ctx context.Context, config Config) error {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Config) error); ok {
		r0 = rf(ctx, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Next provides a mock function with given fields: ctx
func (_m *mockClient) Next(ctx context.Context) (sdk.Record, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 sdk.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (sdk.Record, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) sdk.Record); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(sdk.Record)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplayID provides a mock function with given fields:
func (_m *mockClient) ReplayID() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReplayID")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *mockClient) Stop() {
	_m.Called()
}

// newMockClient creates a new instance of mockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockClient {
	mock := &mockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
