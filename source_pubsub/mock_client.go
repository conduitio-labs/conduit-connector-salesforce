// Code generated by mockery v2.40.3. DO NOT EDIT.

package source

import (
	context "context"

	sdk "github.com/conduitio/conduit-connector-sdk"
	mock "github.com/stretchr/testify/mock"
)

// mockClient is an autogenerated mock type for the client type
type mockClient struct {
	mock.Mock
}

type mockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockClient) EXPECT() *mockClient_Expecter {
	return &mockClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: _a0
func (_m *mockClient) Close(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type mockClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockClient_Expecter) Close(_a0 interface{}) *mockClient_Close_Call {
	return &mockClient_Close_Call{Call: _e.mock.On("Close", _a0)}
}

func (_c *mockClient_Close_Call) Run(run func(_a0 context.Context)) *mockClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockClient_Close_Call) Return(_a0 error) *mockClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClient_Close_Call) RunAndReturn(run func(context.Context) error) *mockClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields: _a0
func (_m *mockClient) Initialize(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockClient_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type mockClient_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockClient_Expecter) Initialize(_a0 interface{}) *mockClient_Initialize_Call {
	return &mockClient_Initialize_Call{Call: _e.mock.On("Initialize", _a0)}
}

func (_c *mockClient_Initialize_Call) Run(run func(_a0 context.Context)) *mockClient_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockClient_Initialize_Call) Return(_a0 error) *mockClient_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClient_Initialize_Call) RunAndReturn(run func(context.Context) error) *mockClient_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with given fields: _a0
func (_m *mockClient) Next(_a0 context.Context) (sdk.Record, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 sdk.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (sdk.Record, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) sdk.Record); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(sdk.Record)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockClient_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type mockClient_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockClient_Expecter) Next(_a0 interface{}) *mockClient_Next_Call {
	return &mockClient_Next_Call{Call: _e.mock.On("Next", _a0)}
}

func (_c *mockClient_Next_Call) Run(run func(_a0 context.Context)) *mockClient_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockClient_Next_Call) Return(_a0 sdk.Record, _a1 error) *mockClient_Next_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockClient_Next_Call) RunAndReturn(run func(context.Context) (sdk.Record, error)) *mockClient_Next_Call {
	_c.Call.Return(run)
	return _c
}

// ReplayID provides a mock function with given fields:
func (_m *mockClient) ReplayID() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReplayID")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// mockClient_ReplayID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplayID'
type mockClient_ReplayID_Call struct {
	*mock.Call
}

// ReplayID is a helper method to define mock.On call
func (_e *mockClient_Expecter) ReplayID() *mockClient_ReplayID_Call {
	return &mockClient_ReplayID_Call{Call: _e.mock.On("ReplayID")}
}

func (_c *mockClient_ReplayID_Call) Run(run func()) *mockClient_ReplayID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClient_ReplayID_Call) Return(_a0 []byte) *mockClient_ReplayID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClient_ReplayID_Call) RunAndReturn(run func() []byte) *mockClient_ReplayID_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: _a0
func (_m *mockClient) Stop(_a0 context.Context) {
	_m.Called(_a0)
}

// mockClient_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type mockClient_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockClient_Expecter) Stop(_a0 interface{}) *mockClient_Stop_Call {
	return &mockClient_Stop_Call{Call: _e.mock.On("Stop", _a0)}
}

func (_c *mockClient_Stop_Call) Run(run func(_a0 context.Context)) *mockClient_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockClient_Stop_Call) Return() *mockClient_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockClient_Stop_Call) RunAndReturn(run func(context.Context)) *mockClient_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function with given fields: _a0
func (_m *mockClient) Wait(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockClient_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type mockClient_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockClient_Expecter) Wait(_a0 interface{}) *mockClient_Wait_Call {
	return &mockClient_Wait_Call{Call: _e.mock.On("Wait", _a0)}
}

func (_c *mockClient_Wait_Call) Run(run func(_a0 context.Context)) *mockClient_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockClient_Wait_Call) Return(_a0 error) *mockClient_Wait_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClient_Wait_Call) RunAndReturn(run func(context.Context) error) *mockClient_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// newMockClient creates a new instance of mockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockClient {
	mock := &mockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
