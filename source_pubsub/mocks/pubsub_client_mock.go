// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/conduitio-labs/conduit-connector-salesforce/source_pubsub/proto"
)

// PubSubClient is an autogenerated mock type for the PubSubClient type
type PubSubClient struct {
	mock.Mock
}

type PubSubClient_Expecter struct {
	mock *mock.Mock
}

func (_m *PubSubClient) EXPECT() *PubSubClient_Expecter {
	return &PubSubClient_Expecter{mock: &_m.Mock}
}

// GetSchema provides a mock function with given fields: ctx, in, opts
func (_m *PubSubClient) GetSchema(ctx context.Context, in *proto.SchemaRequest, opts ...grpc.CallOption) (*proto.SchemaInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSchema")
	}

	var r0 *proto.SchemaInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SchemaRequest, ...grpc.CallOption) (*proto.SchemaInfo, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SchemaRequest, ...grpc.CallOption) *proto.SchemaInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SchemaInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.SchemaRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PubSubClient_GetSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchema'
type PubSubClient_GetSchema_Call struct {
	*mock.Call
}

// GetSchema is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.SchemaRequest
//   - opts ...grpc.CallOption
func (_e *PubSubClient_Expecter) GetSchema(ctx interface{}, in interface{}, opts ...interface{}) *PubSubClient_GetSchema_Call {
	return &PubSubClient_GetSchema_Call{Call: _e.mock.On("GetSchema",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *PubSubClient_GetSchema_Call) Run(run func(ctx context.Context, in *proto.SchemaRequest, opts ...grpc.CallOption)) *PubSubClient_GetSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.SchemaRequest), variadicArgs...)
	})
	return _c
}

func (_c *PubSubClient_GetSchema_Call) Return(_a0 *proto.SchemaInfo, _a1 error) *PubSubClient_GetSchema_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PubSubClient_GetSchema_Call) RunAndReturn(run func(context.Context, *proto.SchemaRequest, ...grpc.CallOption) (*proto.SchemaInfo, error)) *PubSubClient_GetSchema_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopic provides a mock function with given fields: ctx, in, opts
func (_m *PubSubClient) GetTopic(ctx context.Context, in *proto.TopicRequest, opts ...grpc.CallOption) (*proto.TopicInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTopic")
	}

	var r0 *proto.TopicInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.TopicRequest, ...grpc.CallOption) (*proto.TopicInfo, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.TopicRequest, ...grpc.CallOption) *proto.TopicInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.TopicInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.TopicRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PubSubClient_GetTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopic'
type PubSubClient_GetTopic_Call struct {
	*mock.Call
}

// GetTopic is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.TopicRequest
//   - opts ...grpc.CallOption
func (_e *PubSubClient_Expecter) GetTopic(ctx interface{}, in interface{}, opts ...interface{}) *PubSubClient_GetTopic_Call {
	return &PubSubClient_GetTopic_Call{Call: _e.mock.On("GetTopic",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *PubSubClient_GetTopic_Call) Run(run func(ctx context.Context, in *proto.TopicRequest, opts ...grpc.CallOption)) *PubSubClient_GetTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.TopicRequest), variadicArgs...)
	})
	return _c
}

func (_c *PubSubClient_GetTopic_Call) Return(_a0 *proto.TopicInfo, _a1 error) *PubSubClient_GetTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PubSubClient_GetTopic_Call) RunAndReturn(run func(context.Context, *proto.TopicRequest, ...grpc.CallOption) (*proto.TopicInfo, error)) *PubSubClient_GetTopic_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, in, opts
func (_m *PubSubClient) Publish(ctx context.Context, in *proto.PublishRequest, opts ...grpc.CallOption) (*proto.PublishResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 *proto.PublishResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.PublishRequest, ...grpc.CallOption) (*proto.PublishResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.PublishRequest, ...grpc.CallOption) *proto.PublishResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PublishResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.PublishRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PubSubClient_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type PubSubClient_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.PublishRequest
//   - opts ...grpc.CallOption
func (_e *PubSubClient_Expecter) Publish(ctx interface{}, in interface{}, opts ...interface{}) *PubSubClient_Publish_Call {
	return &PubSubClient_Publish_Call{Call: _e.mock.On("Publish",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *PubSubClient_Publish_Call) Run(run func(ctx context.Context, in *proto.PublishRequest, opts ...grpc.CallOption)) *PubSubClient_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.PublishRequest), variadicArgs...)
	})
	return _c
}

func (_c *PubSubClient_Publish_Call) Return(_a0 *proto.PublishResponse, _a1 error) *PubSubClient_Publish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PubSubClient_Publish_Call) RunAndReturn(run func(context.Context, *proto.PublishRequest, ...grpc.CallOption) (*proto.PublishResponse, error)) *PubSubClient_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// PublishStream provides a mock function with given fields: ctx, opts
func (_m *PubSubClient) PublishStream(ctx context.Context, opts ...grpc.CallOption) (proto.PubSub_PublishStreamClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PublishStream")
	}

	var r0 proto.PubSub_PublishStreamClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (proto.PubSub_PublishStreamClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) proto.PubSub_PublishStreamClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proto.PubSub_PublishStreamClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PubSubClient_PublishStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishStream'
type PubSubClient_PublishStream_Call struct {
	*mock.Call
}

// PublishStream is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *PubSubClient_Expecter) PublishStream(ctx interface{}, opts ...interface{}) *PubSubClient_PublishStream_Call {
	return &PubSubClient_PublishStream_Call{Call: _e.mock.On("PublishStream",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *PubSubClient_PublishStream_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *PubSubClient_PublishStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *PubSubClient_PublishStream_Call) Return(_a0 proto.PubSub_PublishStreamClient, _a1 error) *PubSubClient_PublishStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PubSubClient_PublishStream_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (proto.PubSub_PublishStreamClient, error)) *PubSubClient_PublishStream_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: ctx, opts
func (_m *PubSubClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (proto.PubSub_SubscribeClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 proto.PubSub_SubscribeClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (proto.PubSub_SubscribeClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) proto.PubSub_SubscribeClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proto.PubSub_SubscribeClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PubSubClient_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type PubSubClient_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *PubSubClient_Expecter) Subscribe(ctx interface{}, opts ...interface{}) *PubSubClient_Subscribe_Call {
	return &PubSubClient_Subscribe_Call{Call: _e.mock.On("Subscribe",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *PubSubClient_Subscribe_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *PubSubClient_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *PubSubClient_Subscribe_Call) Return(_a0 proto.PubSub_SubscribeClient, _a1 error) *PubSubClient_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PubSubClient_Subscribe_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (proto.PubSub_SubscribeClient, error)) *PubSubClient_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewPubSubClient creates a new instance of PubSubClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPubSubClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PubSubClient {
	mock := &PubSubClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
